{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\MaKe'\\\\Documents\\\\LACAPSULE\\\\NaliHair\\\\Nali-project\\\\screens\\\\SnapScreen.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Camera } from 'expo-camera';\nimport { useIsFocused } from '@react-navigation/native';\nimport IconFontAwesome from \"@expo/vector-icons/FontAwesome\";\nimport IconIonic from \"@expo/vector-icons/Ionicons\";\nimport { Button, Overlay } from 'react-native-elements';\nimport { Entypo } from '@expo/vector-icons';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { connect } from 'react-redux';\n\nfunction SnapScreen(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(Camera.Constants.Type.back),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  var _useState5 = useState(Camera.Constants.FlashMode.off),\n      _useState6 = _slicedToArray(_useState5, 2),\n      flash = _useState6[0],\n      setFlash = _useState6[1];\n\n  var camera = useRef(null);\n  var isFocused = useIsFocused();\n  useEffect(function () {\n    (function _callee() {\n      var _await$Camera$request, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Camera.requestPermissionsAsync());\n\n            case 2:\n              _await$Camera$request = _context.sent;\n              status = _await$Camera$request.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  var cameraDisplay;\n\n  if (hasPermission && isFocused) {\n    cameraDisplay = React.createElement(Camera, {\n      style: {\n        flex: 1\n      },\n      type: type,\n      flashMode: flash,\n      ref: function ref(_ref) {\n        return camera = _ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }\n    }, React.createElement(View, {\n      style: {\n        flex: 1,\n        backgroundColor: 'transparent',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, React.createElement(TouchableOpacity, {\n      style: {\n        alignSelf: 'flex-end',\n        alignItems: 'center'\n      },\n      onPress: function onPress() {\n        setType(type === Camera.Constants.Type.back ? Camera.Constants.Type.front : Camera.Constants.Type.back);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, React.createElement(IconIonic, {\n      name: \"camera-reverse\",\n      size: 20,\n      color: \"#ffffff\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 12\n      }\n    }), React.createElement(Text, {\n      style: {\n        fontSize: 18,\n        marginBottom: 10,\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    }, \" Flip \")), React.createElement(TouchableOpacity, {\n      style: {\n        width: 50,\n        borderRadius: 50,\n        alignSelf: 'flex-end',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      onPress: function _callee2() {\n        var photo, data;\n        return _regeneratorRuntime.async(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!camera) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                _context2.next = 3;\n                return _regeneratorRuntime.awrap(camera.takePictureAsync({\n                  quality: 0.3\n                }));\n\n              case 3:\n                photo = _context2.sent;\n                data = new FormData();\n                data.append('avatar', {\n                  uri: photo.uri,\n                  type: 'image/jpeg',\n                  name: 'avatar.jpg'\n                });\n                props.navigation.navigate('DailyPics');\n                props.onSnap(data);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, React.createElement(Entypo, {\n      name: \"circle\",\n      size: 50,\n      color: \"white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    })), React.createElement(TouchableOpacity, {\n      style: {\n        alignSelf: 'flex-end',\n        alignItems: 'center'\n      },\n      onPress: function onPress() {\n        setFlash(flash === Camera.Constants.FlashMode.torch ? Camera.Constants.FlashMode.off : Camera.Constants.FlashMode.torch);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, React.createElement(IconFontAwesome, {\n      name: \"flash\",\n      size: 20,\n      color: \"#ffffff\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 12\n      }\n    }), React.createElement(Text, {\n      style: {\n        fontSize: 18,\n        marginBottom: 10,\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 15\n      }\n    }, \" Flash \"))));\n  } else {\n    cameraDisplay = React.createElement(View, {\n      style: {\n        flex: 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    });\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, cameraDisplay);\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onSnap: function onSnap(url) {\n      console.log(url, \"URL URL\");\n      dispatch({\n        type: 'addPicture',\n        url: url\n      });\n    }\n  };\n}\n\nexport default connect(null, mapDispatchToProps)(SnapScreen);","map":{"version":3,"sources":["C:/Users/MaKe'/Documents/LACAPSULE/NaliHair/Nali-project/screens/SnapScreen.js"],"names":["React","useState","useEffect","useRef","Camera","useIsFocused","IconFontAwesome","IconIonic","Button","Overlay","Entypo","MaterialIcons","connect","SnapScreen","props","hasPermission","setHasPermission","Constants","Type","back","type","setType","FlashMode","off","flash","setFlash","camera","isFocused","requestPermissionsAsync","status","cameraDisplay","flex","ref","backgroundColor","flexDirection","alignItems","justifyContent","alignSelf","front","fontSize","marginBottom","color","width","borderRadius","takePictureAsync","quality","photo","data","FormData","append","uri","name","navigation","navigate","onSnap","torch","mapDispatchToProps","dispatch","url","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAkD,OAAlD;;;;AAEA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,OAAOC,eAAP;AACA,OAAOC,SAAP;AAEA,SAAQC,MAAR,EAAgBC,OAAhB,QAA8B,uBAA9B;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA,kBAYiBb,QAAQ,CAAC,IAAD,CAZzB;AAAA;AAAA,MAYlBc,aAZkB;AAAA,MAYHC,gBAZG;;AAAA,mBAaDf,QAAQ,CAACG,MAAM,CAACa,SAAP,CAAiBC,IAAjB,CAAsBC,IAAvB,CAbP;AAAA;AAAA,MAalBC,IAbkB;AAAA,MAaZC,OAbY;;AAAA,mBAcCpB,QAAQ,CAACG,MAAM,CAACa,SAAP,CAAiBK,SAAjB,CAA2BC,GAA5B,CAdT;AAAA;AAAA,MAclBC,KAdkB;AAAA,MAcXC,QAdW;;AAgBzB,MAAIC,MAAM,GAAGvB,MAAM,CAAC,IAAD,CAAnB;AAEA,MAAMwB,SAAS,GAAGtB,YAAY,EAA9B;AAEAH,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC4BE,MAAM,CAACwB,uBAAP,EAD5B;;AAAA;AAAA;AACWC,cAAAA,MADX,yBACWA,MADX;AAEGb,cAAAA,gBAAgB,CAACa,MAAM,KAAK,SAAZ,CAAhB;;AAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALQ,EAKN,EALM,CAAT;AAOA,MAAIC,aAAJ;;AACA,MAAGf,aAAa,IAAIY,SAApB,EAA8B;AAC5BG,IAAAA,aAAa,GAAG,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAf;AAChB,MAAA,IAAI,EAAEX,IADU;AAEhB,MAAA,SAAS,EAAEI,KAFK;AAGhB,MAAA,GAAG,EAAE,aAAAQ,IAAG;AAAA,eAAKN,MAAM,GAAGM,IAAd;AAAA,OAHQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKd,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLD,QAAAA,IAAI,EAAE,CADD;AAELE,QAAAA,eAAe,EAAE,aAFZ;AAGLC,QAAAA,aAAa,EAAE,KAHV;AAILC,QAAAA,UAAU,EAAE,QAJP;AAKLC,QAAAA,cAAc,EAAE;AALX,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE,oBAAC,gBAAD;AACE,MAAA,KAAK,EAAE;AAELC,QAAAA,SAAS,EAAE,UAFN;AAGLF,QAAAA,UAAU,EAAE;AAHP,OADT;AAME,MAAA,OAAO,EAAE,mBAAM;AACbd,QAAAA,OAAO,CACLD,IAAI,KAAKhB,MAAM,CAACa,SAAP,CAAiBC,IAAjB,CAAsBC,IAA/B,GACIf,MAAM,CAACa,SAAP,CAAiBC,IAAjB,CAAsBoB,KAD1B,GAEIlC,MAAM,CAACa,SAAP,CAAiBC,IAAjB,CAAsBC,IAHrB,CAAP;AAKD,OAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAaG,oBAAC,SAAD;AACK,MAAA,IAAI,EAAC,gBADV;AAEK,MAAA,IAAI,EAAE,EAFX;AAGK,MAAA,KAAK,EAAC,SAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbH,EAiBM,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEoB,QAAAA,QAAQ,EAAE,EAAZ;AAAgBC,QAAAA,YAAY,EAAE,EAA9B;AAAkCC,QAAAA,KAAK,EAAE;AAAzC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjBN,CARF,EA4BE,oBAAC,gBAAD;AACA,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,EAAR;AAAYC,QAAAA,YAAY,EAAE,EAA1B;AAA8BN,QAAAA,SAAS,EAAE,UAAzC;AAAqDF,QAAAA,UAAU,EAAE,QAAjE;AAA2EC,QAAAA,cAAc,EAAE;AAA3F,OADP;AAEI,MAAA,OAAO,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACHV,MADG;AAAA;AAAA;AAAA;;AAAA;AAAA,iDAEaA,MAAM,CAACkB,gBAAP,CAAwB;AAACC,kBAAAA,OAAO,EAAG;AAAX,iBAAxB,CAFb;;AAAA;AAEDC,gBAAAA,KAFC;AAGDC,gBAAAA,IAHC,GAGM,IAAIC,QAAJ,EAHN;AAILD,gBAAAA,IAAI,CAACE,MAAL,CAAY,QAAZ,EAAsB;AACpBC,kBAAAA,GAAG,EAAEJ,KAAK,CAACI,GADS;AAEpB9B,kBAAAA,IAAI,EAAE,YAFc;AAGpB+B,kBAAAA,IAAI,EAAE;AAHc,iBAAtB;AAKArC,gBAAAA,KAAK,CAACsC,UAAN,CAAiBC,QAAjB,CAA0B,WAA1B;AACDvC,gBAAAA,KAAK,CAACwC,MAAN,CAAaP,IAAb;;AAVM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAwBI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,IAAI,EAAE,EAA5B;AAAgC,MAAA,KAAK,EAAC,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBJ,CA5BF,EAuDE,oBAAC,gBAAD;AACE,MAAA,KAAK,EAAE;AAELV,QAAAA,SAAS,EAAE,UAFN;AAGLF,QAAAA,UAAU,EAAE;AAHP,OADT;AAME,MAAA,OAAO,EAAE,mBAAM;AACbV,QAAAA,QAAQ,CACND,KAAK,KAAKpB,MAAM,CAACa,SAAP,CAAiBK,SAAjB,CAA2BiC,KAArC,GACInD,MAAM,CAACa,SAAP,CAAiBK,SAAjB,CAA2BC,GAD/B,GAEInB,MAAM,CAACa,SAAP,CAAiBK,SAAjB,CAA2BiC,KAHzB,CAAR;AAKD,OAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAaG,oBAAC,eAAD;AACK,MAAA,IAAI,EAAC,OADV;AAEK,MAAA,IAAI,EAAE,EAFX;AAGK,MAAA,KAAK,EAAC,SAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbH,EAiBM,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEhB,QAAAA,QAAQ,EAAE,EAAZ;AAAgBC,QAAAA,YAAY,EAAE,EAA9B;AAAkCC,QAAAA,KAAK,EAAE;AAAzC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAjBN,CAvDF,CALc,CAAhB;AAiFA,GAlFF,MAkFQ;AACNX,IAAAA,aAAa,GAAG,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAhB;AACA;;AAEF,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACA,MAAAA,IAAI,EAAC;AAAN,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKD,aAFL,CADF;AASD;;AAED,SAAS0B,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO;AAELH,IAAAA,MAAM,EAAE,gBAASI,GAAT,EAAc;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAiB,SAAjB;AACCD,MAAAA,QAAQ,CAAE;AAACrC,QAAAA,IAAI,EAAE,YAAP;AAAqBsC,QAAAA,GAAG,EAAHA;AAArB,OAAF,CAAR;AACD;AALI,GAAP;AAOD;;AAED,eAAe9C,OAAO,CAClB,IADkB,EAElB4C,kBAFkB,CAAP,CAGb3C,UAHa,CAAf","sourcesContent":["import React, { useState, useEffect, useRef} from 'react';\r\nimport { View, TouchableOpacity, Text } from 'react-native';\r\nimport { Camera } from 'expo-camera';\r\nimport { useIsFocused } from '@react-navigation/native';\r\n\r\nimport IconFontAwesome from 'react-native-vector-icons/FontAwesome';\r\nimport IconIonic from 'react-native-vector-icons/Ionicons';\r\n\r\nimport {Button, Overlay} from 'react-native-elements';\r\nimport { Entypo } from '@expo/vector-icons';\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\nimport {connect} from 'react-redux';\r\n\r\nfunction SnapScreen(props) {\r\n\r\n\r\n\r\n  // useEffect(() => {\r\n  //   if (route.state && route.state.routeNames [route.state.index] === \"SnapScreen\") {\r\n  //     navigation.setOptions({ tabBarVisible: false });\r\n  //   } else {\r\n  //     navigation.setOptions({ tabBarVisible: true });\r\n  //   }\r\n  // }, [route.state]);\r\n\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [type, setType] = useState(Camera.Constants.Type.back);\r\n  const [flash, setFlash] = useState(Camera.Constants.FlashMode.off);\r\n\r\n  var camera = useRef(null);\r\n \r\n  const isFocused = useIsFocused();\r\n\r\n  useEffect(() => {  \r\n    (async () => {\r\n        const { status } = await Camera.requestPermissionsAsync();\r\n        setHasPermission(status === 'granted');\r\n    })();\r\n  }, []);\r\n  \r\n  var cameraDisplay;\r\n  if(hasPermission && isFocused){\r\n    cameraDisplay = <Camera style={{ flex: 1 }} \r\n    type={type}\r\n    flashMode={flash}\r\n    ref={ref => (camera = ref)}\r\n    >\r\n      <View    \r\n        style={{\r\n          flex: 1,\r\n          backgroundColor: 'transparent',\r\n          flexDirection: 'row',\r\n          alignItems: 'center',\r\n          justifyContent: 'space-between',\r\n        }}>\r\n        <TouchableOpacity\r\n          style={{\r\n           \r\n            alignSelf: 'flex-end',\r\n            alignItems: 'center',\r\n          }}\r\n          onPress={() => {\r\n            setType(\r\n              type === Camera.Constants.Type.back\r\n                ? Camera.Constants.Type.front\r\n                : Camera.Constants.Type.back\r\n            );\r\n          }}>\r\n           <IconIonic\r\n                name=\"camera-reverse\"\r\n                size={20}\r\n                color=\"#ffffff\"\r\n            /><Text style={{ fontSize: 18, marginBottom: 10, color: 'white' }}> Flip </Text>\r\n        </TouchableOpacity>\r\n  \r\n        <TouchableOpacity\r\n        style={{width: 50, borderRadius: 50, alignSelf: 'flex-end', alignItems: 'center', justifyContent: 'center'}}\r\n            onPress={async () => {\r\n              if (camera) {\r\n                let photo = await camera.takePictureAsync({quality : 0.3});              \r\n                var data = new FormData();\r\n                data.append('avatar', {\r\n                  uri: photo.uri,\r\n                  type: 'image/jpeg',\r\n                  name: 'avatar.jpg',\r\n                });\r\n                props.navigation.navigate('DailyPics')\r\n               props.onSnap(data)\r\n               // var rawResponse = await fetch(\"http://127.0.0.1:19000/upload\", {\r\n               //   method: 'POST',\r\n                //  body: data\r\n               // });\r\n              //  var response = await rawResponse.json();\r\n              //  props.onSnap(response.url);\r\n              //  setVisible(false);\r\n              }\r\n            }\r\n          }\r\n          >\r\n            <Entypo name=\"circle\" size={50} color=\"white\" /></TouchableOpacity>\r\n\r\n\r\n        <TouchableOpacity\r\n          style={{\r\n         \r\n            alignSelf: 'flex-end',\r\n            alignItems: 'center',\r\n          }}\r\n          onPress={() => {\r\n            setFlash(\r\n              flash === Camera.Constants.FlashMode.torch\r\n                ? Camera.Constants.FlashMode.off\r\n                : Camera.Constants.FlashMode.torch\r\n            );\r\n          }}>\r\n           <IconFontAwesome\r\n                name=\"flash\"\r\n                size={20}\r\n                color=\"#ffffff\"\r\n            /><Text style={{ fontSize: 18, marginBottom: 10, color: 'white' }}> Flash </Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    </Camera>\r\n   } else {\r\n    cameraDisplay = <View style={{ flex: 1 }}></View>\r\n   }\r\n\r\n  return (\r\n    <View style={{flex:1}}>\r\n\r\n        {cameraDisplay}\r\n    \r\n   \r\n    \r\n</View>\r\n  );\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n\r\n    onSnap: function(url) { \r\n     console.log(url, \"URL URL\")\r\n      dispatch( {type: 'addPicture', url }) \r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(\r\n    null, \r\n    mapDispatchToProps\r\n)(SnapScreen);\r\n"]},"metadata":{},"sourceType":"module"}