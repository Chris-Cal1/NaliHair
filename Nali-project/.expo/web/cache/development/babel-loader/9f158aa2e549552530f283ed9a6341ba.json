{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\MaKe'\\\\Documents\\\\LACAPSULE\\\\NaliHair\\\\Nali-project\\\\screens\\\\Sign-in.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Card, ListItem, CheckBox, Input } from 'react-native-elements';\nimport AppLoading from 'expo-app-loading';\nimport { useFonts, Handlee_400Regular } from '@expo-google-fonts/handlee';\nimport { Roboto_400Regular, Roboto_700Bold, Roboto_500Medium, Roboto_300Light } from '@expo-google-fonts/roboto';\nimport { connect } from 'react-redux';\n\nfunction Signin(props) {\n  var _this = this;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      mail = _useState2[0],\n      setMail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      userExists = _useState6[0],\n      setUserExists = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      listErrorsSignup = _useState8[0],\n      setErrorsSignup = _useState8[1];\n\n  var userData = {\n    mail: mail,\n    password: password\n  };\n\n  var handleSubmit = function handleSubmit() {\n    var data, body, tabErrorsSignin;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('http://192.168.254.3:3000/sign-in', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              },\n              body: \"email=\" + mail + \"&password=\" + password\n            }));\n\n          case 2:\n            data = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(data.json());\n\n          case 5:\n            body = _context.sent;\n\n            if (body.result == true) {\n              props.navigation.navigate('Profil');\n              props.addToken(body.token);\n              setUserExists(true);\n            } else {\n              setErrorsSignup(body.error);\n            }\n\n            tabErrorsSignin = listErrorsSignin.map(function (error, i) {\n              return React.createElement(\"p\", {\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 49,\n                  columnNumber: 14\n                }\n              }, error);\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _useFonts = useFonts({\n    Handlee_400Regular: Handlee_400Regular,\n    Roboto_400Regular: Roboto_400Regular,\n    Roboto_700Bold: Roboto_700Bold,\n    Roboto_500Medium: Roboto_500Medium,\n    Roboto_300Light: Roboto_300Light\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  if (!fontsLoaded) {\n    return React.createElement(AppLoading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 12\n      }\n    });\n  } else {\n    return React.createElement(ImageBackground, {\n      source: require(\"../assets/003.png\"),\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }\n    }, React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, React.createElement(Image, {\n      source: require(\"../assets/logo_nalihair.png\"),\n      style: {\n        width: 150,\n        height: 200,\n        marginBottom: '10%',\n        marginTop: '20%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }), React.createElement(Input, {\n      containerStyle: {\n        borderColor: \"lightgrey\",\n        marginBottom: 20,\n        elevation: 3,\n        width: 200,\n        height: '8%'\n      },\n      placeholder: \"Mail\",\n      onChangeText: function onChangeText(val) {\n        return setMail(val);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 10\n      }\n    }), React.createElement(Input, {\n      containerStyle: {\n        borderColor: \"lightgrey\",\n        marginBottom: 20,\n        elevation: 3,\n        width: 200,\n        height: '8%'\n      },\n      placeholder: \"Mot de passe\",\n      onChangeText: function onChangeText(val) {\n        return setPassword(val);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 10\n      }\n    }), React.createElement(TouchableOpacity, {\n      style: {\n        fontSize: 40,\n        color: 'white',\n        backgroundColor: \"#222222\",\n        marginTop: 15,\n        fontFamily: 'Roboto_400Regular',\n        borderRadius: 10,\n        height: 50,\n        width: 180,\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      onPress: function onPress() {\n        return handleSubmit();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: 'white',\n        fontFamily: 'Roboto_400Regular',\n        fontSize: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, \" Me connecter \")), React.createElement(Text, {\n      style: {\n        color: '#222222',\n        fontFamily: 'Roboto_400Regular',\n        fontSize: 15,\n        marginTop: 15\n      },\n      onPress: function onPress() {\n        return props.navigation.navigate('Signup');\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, \" M'inscrire \")), React.createElement(StatusBar, {\n      style: \"dark\",\n      backgroundColor: \"white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addToken: function addToken(token) {\n      console.log(\"MON TOKEN ======>>\", token);\n      dispatch({\n        type: 'addToken',\n        token: token\n      });\n    }\n  };\n}\n\nexport default connect(null, mapDispatchToProps)(Signin);","map":{"version":3,"sources":["C:/Users/MaKe'/Documents/LACAPSULE/NaliHair/Nali-project/screens/Sign-in.js"],"names":["React","useState","useEffect","useRef","StatusBar","Card","ListItem","CheckBox","Input","AppLoading","useFonts","Handlee_400Regular","Roboto_400Regular","Roboto_700Bold","Roboto_500Medium","Roboto_300Light","connect","Signin","props","mail","setMail","password","setPassword","userExists","setUserExists","listErrorsSignup","setErrorsSignup","userData","handleSubmit","fetch","method","headers","body","data","json","result","navigation","navigate","addToken","token","error","tabErrorsSignin","listErrorsSignin","map","i","fontsLoaded","require","styles","container","width","height","marginBottom","marginTop","borderColor","elevation","val","fontSize","color","backgroundColor","fontFamily","borderRadius","alignItems","justifyContent","StyleSheet","create","flex","mapDispatchToProps","dispatch","console","log","type"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef} from 'react';\r\n\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { StyleSheet, Text, ImageBackground, Button, TouchableOpacity, View, Image} from 'react-native';\r\nimport { Card, ListItem, CheckBox, Input } from 'react-native-elements';\r\n\r\nimport AppLoading from 'expo-app-loading';\r\nimport { useFonts, Handlee_400Regular } from '@expo-google-fonts/handlee';\r\nimport { Roboto_400Regular, Roboto_700Bold, Roboto_500Medium, Roboto_300Light} from '@expo-google-fonts/roboto';\r\nimport {connect} from 'react-redux'\r\n\r\nfunction Signin(props) {\r\n\r\n  const [mail, setMail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const [userExists, setUserExists] = useState(false)\r\n  const [listErrorsSignup, setErrorsSignup] = useState([])\r\n\r\n  var userData = {mail: mail, password: password};\r\n \r\n  var handleSubmit = async () => {\r\n\r\n\r\n\r\n    const data = await fetch('http://192.168.254.3:3000/sign-in', {\r\n\r\n      method: 'POST',\r\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'},\r\n      body: `email=${mail}&password=${password}`\r\n\r\n    })\r\n\r\n    const body = await data.json()\r\n\r\n    if(body.result == true){\r\n      props.navigation.navigate('Profil')\r\n      props.addToken(body.token)\r\n      setUserExists(true)\r\n\r\n    } else {\r\n      setErrorsSignup(body.error)\r\n    }\r\n\r\n\r\n\r\n\r\n    var tabErrorsSignin = listErrorsSignin.map((error,i) => {\r\n      return(<p>{error}</p>)\r\n    });\r\n  \r\n     \r\n   }\r\n\r\n   \r\n   let [fontsLoaded] = useFonts({\r\n    Handlee_400Regular,\r\n    Roboto_400Regular,\r\n    Roboto_700Bold,\r\n    Roboto_500Medium,\r\n    Roboto_300Light\r\n  });\r\n\r\n  if (!fontsLoaded) {\r\n    return <AppLoading />;\r\n  } else {\r\n\r\n  return (\r\n\r\n    <ImageBackground  source={require('../assets/003.png')} style={styles.container}>\r\n        <View style={styles.container}> \r\n          <Image source={require('../assets/logo_nalihair.png')} style={{ width: 150, height: 200, marginBottom: '10%', marginTop: '20%' }} />\r\n\r\n\r\n         <Input \r\n          containerStyle = {{borderColor: \"lightgrey\", marginBottom: 20, elevation: 3, width: 200, height: '8%' }}\r\n          placeholder='Mail'\r\n          onChangeText={(val) => setMail(val)}/>\r\n\r\n         <Input \r\n          containerStyle = {{borderColor: \"lightgrey\", marginBottom: 20, elevation: 3, width: 200, height: '8%' }}\r\n          placeholder='Mot de passe'\r\n          onChangeText={(val) => setPassword(val)}/>\r\n\r\n\r\n          <TouchableOpacity  style={{ fontSize: 40, color: 'white', backgroundColor: \"#222222\", marginTop: 15, fontFamily: 'Roboto_400Regular', borderRadius: 10, height: 50, width: 180, alignItems: 'center', justifyContent: 'center'}}\r\n          onPress={() => handleSubmit()}\r\n          >\r\n          <Text style={{ color: 'white', fontFamily: 'Roboto_400Regular', fontSize: 20}}> Me connecter </Text>\r\n          </TouchableOpacity>\r\n          <Text style={{ color: '#222222', fontFamily: 'Roboto_400Regular', fontSize: 15, marginTop: 15}}  onPress={() => props.navigation.navigate('Signup')}> M'inscrire </Text>\r\n        </View>\r\n        <StatusBar style=\"dark\" backgroundColor='white'/>\r\n    </ImageBackground>\r\n\r\n    \r\n  );\r\n}\r\n}\r\nconst styles = StyleSheet.create({\r\n   container: {\r\n     flex: 1,\r\n     alignItems: 'center',\r\n     justifyContent: 'center',\r\n     \r\n   },\r\n});\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n  return {\r\n    addToken: function(token){\r\n      console.log(\"MON TOKEN ======>>\", token)\r\n      dispatch({type: 'addToken', token: token})\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(Signin)"]},"metadata":{},"sourceType":"module"}